name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Test and lint the codebase
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: financial_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        pip install -r mcp-servers/document-parser/requirements.txt

    - name: Type check API
      run: |
        cd apps/api
        npm run type-check

    - name: Type check Web
      run: |
        cd apps/web
        npm run build

    - name: Test MCP Services
      run: |
        cd mcp-servers/constraint-engine
        npm run build
        cd ../alert-manager
        npm run build
        cd ../ai-analyzer
        npm run build

    - name: Run system validation
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/financial_analyzer_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        ANTHROPIC_API_KEY: test-key
      run: |
        node test-system-validation.js

    - name: Run integration tests
      if: success()
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/financial_analyzer_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        ANTHROPIC_API_KEY: test-key
      run: |
        node tests/integration/integration-test-suite.js

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Build and test Docker images
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/api/Dockerfile
        tags: financial-analyzer/api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Build Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/web/Dockerfile
        tags: financial-analyzer/web:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Build MCP services
      run: |
        docker build -t financial-analyzer/document-parser:test mcp-servers/document-parser/
        docker build -t financial-analyzer/constraint-engine:test mcp-servers/constraint-engine/
        docker build -t financial-analyzer/alert-manager:test mcp-servers/alert-manager/
        docker build -t financial-analyzer/ai-analyzer:test mcp-servers/ai-analyzer/

    - name: Test Docker Compose
      run: |
        cp .env.production .env
        sed -i 's/your-secure-postgres-password/postgres/g' .env
        sed -i 's/your-secure-redis-password/redis123/g' .env
        sed -i 's/your-super-secure-jwt-secret-key-here/test-jwt-secret/g' .env
        sed -i 's/your-anthropic-api-key-here/test-key/g' .env
        
        docker-compose -f docker-compose.production.yml config
        echo "Docker Compose configuration is valid"

  # Code quality analysis
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Performance testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Notify status
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, security, docker-build, code-quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.docker-build.result == 'success'
      run: echo "✅ All CI checks passed successfully!"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "❌ CI checks failed!"
        exit 1