name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/api/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/web/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Document Parser image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-servers/document-parser
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/document-parser:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Constraint Engine image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-servers/constraint-engine
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/constraint-engine:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Alert Manager image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-servers/alert-manager
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/alert-manager:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push AI Analyzer image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-servers/ai-analyzer
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-analyzer:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Update image tags in Kubernetes manifests
      run: |
        sed -i "s|financial-analyzer/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}|g" k8s/api.yaml
        sed -i "s|financial-analyzer/web:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}|g" k8s/web.yaml
        sed -i "s|financial-analyzer/document-parser:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/document-parser:${{ github.sha }}|g" k8s/mcp-services.yaml
        sed -i "s|financial-analyzer/constraint-engine:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/constraint-engine:${{ github.sha }}|g" k8s/mcp-services.yaml
        sed -i "s|financial-analyzer/alert-manager:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/alert-manager:${{ github.sha }}|g" k8s/mcp-services.yaml
        sed -i "s|financial-analyzer/ai-analyzer:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-analyzer:${{ github.sha }}|g" k8s/mcp-services.yaml

    - name: Deploy to staging
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/api.yaml
        kubectl apply -f k8s/web.yaml
        kubectl apply -f k8s/mcp-services.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/api -n financial-analyzer
        kubectl wait --for=condition=available --timeout=600s deployment/web -n financial-analyzer
        kubectl wait --for=condition=available --timeout=600s deployment/document-parser -n financial-analyzer
        kubectl wait --for=condition=available --timeout=600s deployment/constraint-engine -n financial-analyzer
        kubectl wait --for=condition=available --timeout=600s deployment/alert-manager -n financial-analyzer
        kubectl wait --for=condition=available --timeout=600s deployment/ai-analyzer -n financial-analyzer

    - name: Run health checks
      run: |
        kubectl get pods -n financial-analyzer
        kubectl get services -n financial-analyzer
        
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=api -n financial-analyzer --timeout=300s
        kubectl wait --for=condition=ready pod -l app=web -n financial-analyzer --timeout=300s

    - name: Run smoke tests
      run: |
        # Get service URLs
        API_URL=$(kubectl get service api-service -n financial-analyzer -o jsonpath='{.spec.clusterIP}'):3001
        WEB_URL=$(kubectl get service web-service -n financial-analyzer -o jsonpath='{.spec.clusterIP}'):3000
        
        # Test API health endpoint
        kubectl run curl-test --image=curlimages/curl --rm -i --restart=Never -- curl -f http://$API_URL/api/health
        
        # Test web application
        kubectl run curl-test --image=curlimages/curl --rm -i --restart=Never -- curl -f http://$WEB_URL/

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Create backup before deployment
      run: |
        # Backup database
        kubectl exec -n financial-analyzer deployment/postgres -- pg_dump -U postgres financial_analyzer > backup-pre-deploy-$(date +%Y%m%d-%H%M%S).sql
        
        # Store backup in artifacts
        echo "Database backup created"

    - name: Update image tags in Kubernetes manifests
      run: |
        sed -i "s|financial-analyzer/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}|g" k8s/api.yaml
        sed -i "s|financial-analyzer/web:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}|g" k8s/web.yaml
        sed -i "s|financial-analyzer/document-parser:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/document-parser:${{ github.sha }}|g" k8s/mcp-services.yaml
        sed -i "s|financial-analyzer/constraint-engine:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/constraint-engine:${{ github.sha }}|g" k8s/mcp-services.yaml
        sed -i "s|financial-analyzer/alert-manager:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/alert-manager:${{ github.sha }}|g" k8s/mcp-services.yaml
        sed -i "s|financial-analyzer/ai-analyzer:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-analyzer:${{ github.sha }}|g" k8s/mcp-services.yaml

    - name: Rolling deployment to production
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        
        # Rolling update strategy
        kubectl patch deployment api -n financial-analyzer -p '{"spec":{"strategy":{"type":"RollingUpdate","rollingUpdate":{"maxUnavailable":"25%","maxSurge":"25%"}}}}'
        kubectl patch deployment web -n financial-analyzer -p '{"spec":{"strategy":{"type":"RollingUpdate","rollingUpdate":{"maxUnavailable":"25%","maxSurge":"25%"}}}}'
        
        kubectl apply -f k8s/api.yaml
        kubectl apply -f k8s/web.yaml
        kubectl apply -f k8s/mcp-services.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for production deployment
      run: |
        kubectl rollout status deployment/api -n financial-analyzer --timeout=600s
        kubectl rollout status deployment/web -n financial-analyzer --timeout=600s
        kubectl rollout status deployment/document-parser -n financial-analyzer --timeout=600s
        kubectl rollout status deployment/constraint-engine -n financial-analyzer --timeout=600s
        kubectl rollout status deployment/alert-manager -n financial-analyzer --timeout=600s
        kubectl rollout status deployment/ai-analyzer -n financial-analyzer --timeout=600s

    - name: Production health checks
      run: |
        # Comprehensive health checks
        kubectl get pods -n financial-analyzer
        kubectl get services -n financial-analyzer
        
        # Wait for all pods to be ready
        kubectl wait --for=condition=ready pod -l app=api -n financial-analyzer --timeout=300s
        kubectl wait --for=condition=ready pod -l app=web -n financial-analyzer --timeout=300s
        
        # Test critical endpoints
        API_URL=$(kubectl get service api-service -n financial-analyzer -o jsonpath='{.spec.clusterIP}'):3001
        kubectl run health-check --image=curlimages/curl --rm -i --restart=Never -- curl -f http://$API_URL/api/health

    - name: Notify deployment success
      run: |
        echo "🎉 Production deployment successful!"
        echo "Version: ${{ github.sha }}"
        echo "Environment: production"

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: [deploy-staging, deploy-production]
    environment: production
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/api -n financial-analyzer
        kubectl rollout undo deployment/web -n financial-analyzer
        kubectl rollout undo deployment/document-parser -n financial-analyzer
        kubectl rollout undo deployment/constraint-engine -n financial-analyzer
        kubectl rollout undo deployment/alert-manager -n financial-analyzer
        kubectl rollout undo deployment/ai-analyzer -n financial-analyzer

    - name: Wait for rollback
      run: |
        kubectl rollout status deployment/api -n financial-analyzer --timeout=600s
        kubectl rollout status deployment/web -n financial-analyzer --timeout=600s

    - name: Notify rollback
      run: |
        echo "⚠️ Deployment rolled back due to failure"
        echo "Please investigate the issue before attempting another deployment"