name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --output=json > npm-audit.json || true
        
    - name: Upload npm audit results
      uses: actions/upload-artifact@v3
      with:
        name: npm-audit-results
        path: npm-audit.json

    - name: Run Snyk vulnerability scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json > snyk-results.json

    - name: Upload Snyk results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: snyk-results
        path: snyk-results.json

  # Container image scanning
  container-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build API image for scanning
      run: docker build -t financial-analyzer/api:scan -f apps/api/Dockerfile .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'financial-analyzer/api:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code security analysis
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Infrastructure security
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov on Dockerfile
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile
        output_format: sarif
        output_file_path: checkov-dockerfile.sarif

    - name: Run Checkov on Kubernetes
      uses: bridgecrewio/checkov-action@master
      with:
        directory: k8s/
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-k8s.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-dockerfile.sarif

    - name: Upload Checkov K8s results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-k8s.sarif

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-security, secret-scan, infrastructure-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "**Date:** $(date)" >> security-report.md
        echo "**Commit:** ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- Code Security: ${{ needs.code-security.result }}" >> security-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
        
        if [[ -f npm-audit-results/npm-audit.json ]]; then
          echo "" >> security-report.md
          echo "## NPM Audit Summary" >> security-report.md
          cat npm-audit-results/npm-audit.json | jq -r '.metadata | "**Vulnerabilities:** \(.vulnerabilities.total) (Critical: \(.vulnerabilities.critical), High: \(.vulnerabilities.high), Moderate: \(.vulnerabilities.moderate), Low: \(.vulnerabilities.low))"' >> security-report.md
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

    - name: Comment on PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ”’ Security Scan Results\n${report}`
          });