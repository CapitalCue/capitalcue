version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-financial_analyzer}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-financial_analyzer}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main API Service
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-financial_analyzer}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      API_PORT: 3001
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      MCP_DOCUMENT_PARSER_URL: http://document-parser:8001
      MCP_CONSTRAINT_ENGINE_URL: http://constraint-engine:8002
      MCP_ALERT_MANAGER_URL: http://alert-manager:8003
      MCP_AI_ANALYZER_URL: http://ai-analyzer:8004
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-52428800}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
    ports:
      - "${API_PORT:-3001}:3001"
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_URL: http://api:3001
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Document Parser Service
  document-parser:
    build:
      context: ./mcp-servers/document-parser
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      PORT: 8001
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${DOCUMENT_PARSER_PORT:-8001}:8001"
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Constraint Engine Service
  constraint-engine:
    build:
      context: ./mcp-servers/constraint-engine
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8002
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${CONSTRAINT_ENGINE_PORT:-8002}:8002"
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8002/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alert Manager Service
  alert-manager:
    build:
      context: ./mcp-servers/alert-manager
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8003
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${ALERT_MANAGER_PORT:-8003}:8003"
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8003/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Analyzer Service
  ai-analyzer:
    build:
      context: ./mcp-servers/ai-analyzer
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8004
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    ports:
      - "${AI_ANALYZER_PORT:-8004}:8004"
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8004/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - financial-analyzer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  financial-analyzer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local