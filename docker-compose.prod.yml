version: '3.8'

services:
  # Document Parser Service
  document-parser:
    build:
      context: ./mcp-servers/document-parser
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - PORT=8001
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Constraint Engine Service
  constraint-engine:
    build:
      context: ./mcp-servers/constraint-engine
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=production
      - PORT=8002
      - DATABASE_URL=${DATABASE_URL}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alert Manager Service
  alert-manager:
    build:
      context: ./mcp-servers/alert-manager
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=production
      - PORT=8003
      - DATABASE_URL=${DATABASE_URL}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Analyzer Service
  ai-analyzer:
    build:
      context: ./mcp-servers/ai-analyzer
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=production
      - PORT=8004
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=capitalcue
      - POSTGRES_USER=${POSTGRES_USER:-capitalcue}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - document-parser
      - constraint-engine
      - alert-manager
      - ai-analyzer
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: capitalcue-network